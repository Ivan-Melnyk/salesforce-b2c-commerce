<?xml version="1.0" encoding="UTF-8" ?>
<?demandware-pipeline version="2.0"?>

<pipeline type="view">
  <branch basename="Show">
    <segment>
      <node>
        <start-node name="Show" secure="false"/>
        <node-display x="2" y="0"/>
      </node>
      <transition target-connector="in1" target-path="./+1"/>
    </segment>
    <segment>
      <node>
        <join-node/>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <call-node start-name-ref="IDS-GetExistingBasket"/>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <pipelet-node pipelet-name="Assign" pipelet-set-identifier="bc_api">
          <config-property key="Transactional" value="false"/>
          <key-binding alias="(CurrentForms.cmd.commands.getValue()||&quot;&quot;)" key="From_0"/>
          <key-binding alias="CustomCode" key="To_0"/>
          <key-binding alias="&quot;&quot;" key="From_1"/>
          <key-binding alias="ScriptLog" key="To_1"/>
          <key-binding alias="&quot;&quot;" key="From_2"/>
          <key-binding alias="Result" key="To_2"/>
          <key-binding alias="&quot;&quot;" key="From_3"/>
          <key-binding alias="CustomError" key="To_3"/>
          <key-binding alias="&quot;//JUST FOR REMINDER&quot;" key="From_4"/>
          <key-binding alias="CustomComments" key="To_4"/>
          <key-binding alias="CustomComments + &quot;\n//You can use 'CurrentSession', 'CurrentRequest', 'CurrentCustomer' global objects\n&quot;" key="From_5"/>
          <key-binding alias="CustomComments" key="To_5"/>
          <key-binding alias="CustomComments + &quot;//as pdict.CurrentSession, pdict.CurrentRequest, pdict.CurrentCustomer\n&quot;" key="From_6"/>
          <key-binding alias="CustomComments" key="To_6"/>
          <key-binding alias="CustomComments + &quot;//Also you can use Basket inside your code, without any predefines\n&quot;" key="From_7"/>
          <key-binding alias="CustomComments" key="To_7"/>
          <key-binding alias="null" key="From_8"/>
          <key-binding alias="null" key="To_8"/>
          <key-binding alias="null" key="From_9"/>
          <key-binding alias="null" key="To_9"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <pipelet-node pipelet-name="Script" pipelet-set-identifier="bc_api">
          <config-property key="Transactional" value="true"/>
          <config-property key="OnError" value="PIPELET_ERROR"/>
          <config-property key="ScriptFile" value="ds_console:scripts/console.ds"/>
          <config-property key="Timeout" value="300"/>
          <key-binding alias="ScriptLog" key="ScriptLog"/>
          <key-binding alias="CustomCode" key="Request"/>
          <key-binding alias="Result" key="Result"/>
          <key-binding alias="CurrentCustomer" key="CurrentCustomer"/>
          <key-binding alias="Basket" key="Basket"/>
          <key-binding alias="CurrentRequest" key="CurrentRequest"/>
          <key-binding alias="CurrentSession" key="CurrentSession"/>
          <key-binding alias="CurrentForms" key="CurrentForms"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
        <branch basename="b2" source-connector="error">
          <transition target-connector="in2" target-path="./+1">
            <transition-display>
              <bend-point relative-to="source" x="1" y="0"/>
              <bend-point relative-to="target" x="1" y="0"/>
            </transition-display>
          </transition>
        </branch>
      </node>
      <transition target-connector="in1" target-path="./+1"/>
    </segment>
    <segment>
      <node>
        <join-node/>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <pipelet-node pipelet-name="Assign" pipelet-set-identifier="bc_api">
          <config-property key="Transactional" value="false"/>
          <key-binding alias="ScriptLog.match(&quot;Error:&quot;, &quot;g&quot;)" key="From_0"/>
          <key-binding alias="CustomError" key="To_0"/>
          <key-binding alias="(CustomError?&quot;&quot;:(String(Result) + ScriptLog))" key="From_1"/>
          <key-binding alias="Result" key="To_1"/>
          <key-binding alias="(CustomError?String(ScriptLog):&quot;&quot;)" key="From_2"/>
          <key-binding alias="CustomError" key="To_2"/>
          <key-binding alias="null" key="From_3"/>
          <key-binding alias="null" key="To_3"/>
          <key-binding alias="null" key="From_4"/>
          <key-binding alias="null" key="To_4"/>
          <key-binding alias="null" key="From_5"/>
          <key-binding alias="null" key="To_5"/>
          <key-binding alias="null" key="From_6"/>
          <key-binding alias="null" key="To_6"/>
          <key-binding alias="null" key="From_7"/>
          <key-binding alias="null" key="To_7"/>
          <key-binding alias="null" key="From_8"/>
          <key-binding alias="null" key="To_8"/>
          <key-binding alias="null" key="From_9"/>
          <key-binding alias="null" key="To_9"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <interaction-continue-node secure="false" start-name="CmdForm" transaction-required="false">
          <template buffered="true" dynamic="false" name="console"/>
        </interaction-continue-node>
        <node-display x="0" y="1"/>
      </node>
      <transition target-connector="in2" target-path="./-1">
        <transition-display>
          <bend-point relative-to="source" x="-1" y="0"/>
          <bend-point relative-to="target" x="-1" y="0"/>
        </transition-display>
      </transition>
    </segment>
  </branch>
  <branch basename="GetExistingBasket">
    <segment>
      <node>
        <start-node call-mode="private" name="GetExistingBasket" secure="false"/>
        <node-display x="4" y="0"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <decision-node condition-key="typeof(Basket) == 'undefined' || empty(Basket)" condition-operator="expr"/>
        <node-display x="0" y="1"/>
        <branch basename="b2" source-connector="yes">
          <transition target-connector="in">
            <transition-display>
              <bend-point relative-to="source" x="0" y="1"/>
            </transition-display>
          </transition>
          <segment>
            <node>
              <pipelet-node pipelet-name="GetBasket" pipelet-set-identifier="bc_api">
                <config-property key="Create" value="false"/>
                <key-binding alias="Basket" key="Basket"/>
                <key-binding alias="StoredBasket" key="StoredBasket"/>
              </pipelet-node>
              <node-display x="0" y="1"/>
              <branch basename="b2" source-connector="error">
                <transition target-connector="in">
                  <transition-display>
                    <bend-point relative-to="source" x="1" y="0"/>
                  </transition-display>
                </transition>
                <segment>
                  <node>
                    <end-node name="error"/>
                    <node-display orientation="horizontal" x="1" y="0"/>
                  </node>
                </segment>
              </branch>
            </node>
            <simple-transition>
              <transition-display>
                <bend-point relative-to="source" x="0" y="1"/>
              </transition-display>
            </simple-transition>
            <node>
              <end-node/>
              <node-display x="0" y="1"/>
            </node>
          </segment>
        </branch>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="1" y="0"/>
        </transition-display>
      </simple-transition>
      <node>
        <end-node/>
        <node-display orientation="horizontal" x="1" y="0"/>
      </node>
    </segment>
  </branch>
</pipeline>
