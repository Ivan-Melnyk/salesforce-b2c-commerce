/**
 * Library for parsing and executing custom code submitted to the entry point (Controller or Pipeline)
 *
 * @author	Ivan Melnyk <vmmelnic@gmail.com>
 * @version	1.0
 */

var output = '';
var definedInstances = {
	'dw.value.Money': { 'type':dw.value.Money, 'display': 'dw.value.Money', 'show': function(value){ return value } },
	'dw.catalog.Product' : { 'type':dw.catalog.Product, 'display': 'dw.catalog.Product' },
	'dw.order.Order': { 'type': dw.order.Order, 'display': 'dw.order.Order' },
	'Date': { 'type':Date, 'display': 'Date', 'show': function(value){ return value.toString() } }
	//@TODO: add more classes here
};
var console = {
	log: function (out: String) {
		output += String(out);
	},
	info: function (out: String) {
		output += String(out);
	}
};

/**
 * Helper for inserting the spaces for the output line to indicate the level of property
 * Currently on hold, will be adjusted later.
 * 
 * @param {Object} obj	can be anything, the object which should be checked
 * @returns {String} out
 */
function ds_prn(obj : Object) {
	if (typeof(obj) == 'undefined') return;
	var ds_count = 0;
	var out = '';
	for (let i = 0; i < ds_count; i++) {
		out += "  ";
	}
	out += (obj + "\n");
	return out;
}

/**
 * This helper iterates the properties of the given object and prints it out
 * 
 * @param {Object} obj					can be anything, the object which should be displayed
 * @returns {String} out
 */
function print(obj : Object) {
	var out = '';
	for (let key in obj) {
		//if(!obj.hasOwnProperty(key) || ds_count > 10) continue;
		//if (ds_count > 10) break;
		
		let _value = null;
		let _error = true;
		try {
			_value = obj[key];
			_error = false;
		} catch (e) { _value = e.message }
		
		if (typeof(_value) == 'function') {
			out += ds_prn('<span style="color:#800;">' + key + '</span> : <span style="color:#050;">function</span> { }');
			continue;
		}
		
		let DWType = false;
		for (let di in definedInstances) {
			if (_value instanceof definedInstances[di].type) {
				DWType = definedInstances[di];
				break;
			}
		}
		
		if (DWType !== false) {
			out += ds_prn('<span style="color:#800;">' + key + '</span> : <span style="color:#050;">'+DWType.display+'</span> { ' + ( 'show' in DWType ? DWType.show( _value ) : '' ) + ' }');
			continue;
		}
		
		if (typeof(_value) == 'object' && false) {
			if (empty(_value)) {
				out += ds_prn('<span style="color:#800;">' + key + '</span> : <span style="color:#050;">'+(_value === null ? 'null' : typeof(_value))+'</span> { }');
			} else {
				out += ds_prn('<span style="color:#800;">' + key + '</span> : <span style="color:#050;">object</span> { ');
				ds_count++;
				out += print(_value);
				ds_count--;
				out += ds_prn("}");
			}
			continue;
		}
		if (_error) {
			out += ds_prn('<b><span style="color:#f00;">' + key + '</span> : <span style="color:#f00;">ERROR</span> = <span style="color:#f00;">' + _value + '</span></b>');
		} else {
			out += ds_prn('<span style="color:#666;">' + key + '</span> : <span style="color:#0A0;">' + typeof(_value) + '</span> = <span style="color:#00A;">' + ((typeof(_value) != 'object' && typeof(_value) != 'function') ? _value : (_value === null ? 'null' : typeof(_value))) + '</span>');
		}
	}
	return out;
}

/**
 * Replaces 'debug(' in the custom code and performs the debugging (like var_dump)
 * This function writes everything to 'output' variable
 * 
 * @param {Object} obj	can be anything, the object which should be traced or debugged
 */
function ds_debug(obj : Object) {
	// if it's not object
	if (typeof(obj) != 'object' || empty(obj)) {
		output += ('<span style="color:#00CC00;">' + (obj === null ? 'null' : typeof(obj)) + "</span>: " + String(obj));
		return;
	}
	if ((obj instanceof Date) && ('Date' in definedInstances) && !empty(definedInstances.Date) && ('show' in definedInstances.Date) && (typeof(definedInstances.Date.show) == 'function')) {
		output += ('<span style="color:#800;">Date</span> : <span style="color:#050;">' + definedInstances.Date.display + '</span> { ' + definedInstances.Date.show(obj) + ' }');
		return;
	}
	output += print(obj);
}

function Console (basket : dw.order.Basket) {
	
	this.customCode = (session.forms.cmd.commands.getValue() || '');
	this.customError = [];
	
	this.basket = basket;
	
	// Performs main executing of custom code here
	try {
		
		// replacements in custom code
		this._customCode = this.customCode
			//replace eval = new Function
			.replace(/eval[\s]{0,}\(/g, "new Function(")
			//replace out.print = console.log
			.replace(/out\.print[\s]{0,}\(/g, "console.log(")
			//replace print = console.log
			.replace(/print[\s]{0,}\(/g, "console.log(")
			//replace trace = console.log
			.replace(/trace[\s]{0,}\(/g, "console.log(")
			//replace debug = ds_debug(
			.replace(/debug[\s]{0,}\(/g, "ds_debug(")
		;
		
		var FuncToExec = new Function('Basket', 'CurrentCustomer', 'CurrentRequest', 'CurrentSession', 'CurrentForms', this._customCode + "\r\n;");
		FuncToExec.call(this, this.basket, customer, request, session, session.forms);
		
	} catch (e) {
		for (let prop in e) {
			if (e.hasOwnProperty(prop)) {
				this.customError.push(prop+": "+String(e[prop]));
			}
		}
	} finally {
		this.customError = this.customError.join("\r\n");
		this.output = output;
	}
}

module.exports = Console;