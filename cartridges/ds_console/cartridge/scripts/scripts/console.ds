/**
* 
*	@input Request : Object The request
*	@input Basket : Object The Current Basket Object
*	@input CurrentCustomer : Object The CurrentCustomer Object
*	@input CurrentSession : Object The CurrentSession Object
*	@input CurrentRequest : Object The CurrentRequest Object
*	@input CurrentForms : Object The CurrentForms Object
*	@output Result : String The result string
*
*/

function execute( args : PipelineDictionary ) : Number
{
	var CustomCode : String = args.Request;
	var Basket = args.Basket || {};
	try {
		//replacements in custom code
		CustomCode = CustomCode
			//replace eval = new Function
			.replace(/eval[\s]{0,}\(/g, "new Function(")
			//replace out.print = trace
			.replace(/out\.print[\s]{0,}\(/g, "trace(")
			//replace print = trace
			.replace(/print[\s]{0,}\(/g, "trace(")
			//replace debug = ds_debug(
			.replace(/debug[\s]{0,}\(/g, "ds_debug(")
		;
		
		var FuncToExec = new Function('Basket', 'CurrentCustomer', 'CurrentRequest', 'CurrentSession', 'CurrentForms', CustomCode + "\r\n;");
		var result = FuncToExec.apply(this, [ Basket, args.CurrentCustomer, args.CurrentRequest, args.CurrentSession, args.CurrentForms ]);
		args.Result = (result || "");
		
	} catch (ex) {
		trace(" " + ex);
	}
	return PIPELET_NEXT;
}

function ds_debug( obj, justTop )
{
	var justTop = true;
	if (typeof(justTop) == 'boolean') {
		justTop = !!justTop;
	}
	//debugging object
	var ds_count : Number = 0;
	var out = "";
	var definedInstances = {
		'dw.value.Money': { 'type':dw.value.Money, 'display': 'dw.value.Money', 'show': function(value){ return value } },
		'dw.catalog.Product' : { 'type':dw.catalog.Product, 'display': 'dw.catalog.Product' },
		'dw.order.Order': { 'type': dw.order.Order, 'display': 'dw.order.Order' },
		//'Array': { 'type': Array, 'display': 'Array', 'show': function(value){ print(value) } },
		//'Boolean': { 'type': Boolean, 'display': 'Boolean' },
		//'ConversionError': { 'type': ConversionError, 'display': 'ConversionError' },
		'Date': { 'type':Date, 'display': 'Date', 'show': function(value){ return value.toDateString() } }
		//'Error': { 'type': Error, 'display': 'Error', 'show': function(value){ return value.toString() } },
		//'EvalError': { 'type': EvalError, 'display': 'EvalError', 'show': function(value){ return value.toString() } },
		//'Fault': { 'type': Fault, 'display': 'Fault', 'show': function(value){ return value.toString() } },
		//'Function': { 'type': Function, 'display': 'Function' },
		//'InternalError': { 'type': InternalError, 'display': 'InternalError' },
		//'IOError': { 'type': IOError, 'display': 'IOError' },
		//'Iterator': { 'type': Iterator, 'display': 'Iterator' },
		//'JSON': { 'type': JSON, 'display': 'JSON' },
		//'Math': { 'type': Math, 'display': 'Math' },
		//'Namespace': { 'type': Namespace, 'display': 'Namespace' },
		//'Number': { 'type': Number, 'display': 'Number', 'show': function(value){ return value } },
		//'QName': { 'type': QName, 'display': 'QName' },
		//'RangeError': { 'type': RangeError, 'display': 'RangeError', 'show': function(value){ print(value) } },
		//'ReferenceError': { 'type': ReferenceError, 'display': 'ReferenceError', 'show': function(value){ return value.toString() } },
		//'RegExp': { 'type': RegExp, 'display': 'RegExp', 'show': function(value){ print(value) } },
		//'StopIteration': { 'type': StopIteration, 'display': 'StopIteration' },
		//'String': { 'type': String, 'display': 'String', 'show': function(value){ return value } },
		//'SyntaxError': { 'type': SyntaxError, 'display': 'SyntaxError', 'show': function(value){ return value.toString() } },
		//'SystemError': { 'type': SystemError, 'display': 'SystemError', 'show': function(value){ return value.toString() } },
		//'TypeError': { 'type': TypeError, 'display': 'TypeError', 'show': function(value){ return value.toString() } },
		//'URIError': { 'type': URIError, 'display': 'URIError', 'show': function(value){ return value.toString() } },
		//'XML': { 'type': XML, 'display': 'XML' },
		//'XMLList': { 'type': XMLList, 'display': 'XMLList' },
		//'XMLStreamError': { 'type': XMLStreamError, 'display': 'XMLStreamError', 'show': function(value){ return value.toString() } },
		//'dw.campaign.ABTest': { 'type': dw.campaign.ABTest, 'display': 'dw.campaign.ABTest' },
		//'dw.campaign.ABTestMgr': { 'type': dw.campaign.ABTestMgr, 'display': 'dw.campaign.ABTestMgr' },
		//'dw.campaign.ABTestSegment': { 'type': dw.campaign.ABTestSegment, 'display': 'dw.campaign.ABTestSegment' },
		//'dw.campaign.AmountDiscount': { 'type': dw.campaign.AmountDiscount, 'display': 'dw.campaign.AmountDiscount' },
		//'dw.campaign.ApproachingDiscount': { 'type': dw.campaign.ApproachingDiscount, 'display': 'dw.campaign.ApproachingDiscount' },
		//'dw.campaign.BonusChoiceDiscount': { 'type': dw.campaign.BonusChoiceDiscount, 'display': 'dw.campaign.BonusChoiceDiscount' },
		//'dw.campaign.BonusDiscount': { 'type': dw.campaign.BonusDiscount, 'display': 'dw.campaign.BonusDiscount' },
		//'dw.campaign.Campaign': { 'type': dw.campaign.Campaign, 'display': 'dw.campaign.Campaign' },
		//'dw.campaign.CampaignMgr': { 'type': dw.campaign.CampaignMgr, 'display': 'dw.campaign.CampaignMgr' },
		//'dw.campaign.CampaignStatusCodes': { 'type': dw.campaign.CampaignStatusCodes, 'display': 'dw.campaign.CampaignStatusCodes' },
		//'dw.campaign.Coupon': { 'type': dw.campaign.Coupon, 'display': 'dw.campaign.Coupon' },
		//'dw.campaign.CouponMgr': { 'type': dw.campaign.CouponMgr, 'display': 'dw.campaign.CouponMgr' },
		//'dw.campaign.CouponRedemption': { 'type': dw.campaign.CouponRedemption, 'display': 'dw.campaign.CouponRedemption' },
		//'dw.campaign.CouponStatusCodes': { 'type': dw.campaign.CouponStatusCodes, 'display': 'dw.campaign.CouponStatusCodes' },
		//'dw.campaign.Discount': { 'type': dw.campaign.Discount, 'display': 'dw.campaign.Discount' },
		//'Object': { 'type': Object, 'display': 'Object', 'show': function(value){ print(value) } }
	};
	
	//if it's not object
	if( typeof( obj ) != 'object' || empty(obj)){
		trace('<span style="color:#00CC00;">' + (obj === null ? 'null' : typeof( obj )) + "</span>: " + String(obj));
		return;
	}
	
	function ds_prn( obj )
	{
		if(typeof(obj) == 'undefined') return;
		for(var i = 0; i < ds_count; i++)
		{
			out += "  ";
		}
		out += (obj + "\n");
	}
	
	function print(obj)
	{
		for(var key in obj)
		{
			if(!( key in obj ) || ds_count > 10) continue;
			
			var _value = null;
			var _error = true;
			try {
				_value = obj[key];
				_error = false;
			} catch(e) { _value = e.message }
			
			if (typeof(_value) == 'function')
			{
				ds_prn('<span style="color:#800;">' + key + '</span> : <span style="color:#050;">function</span> { }');
				continue;
			}
			
			var DWType = false;
			for( var di in definedInstances){
				if( _value instanceof definedInstances[di].type ){
					DWType = definedInstances[di];
					break;
				}
			}
			
			if( DWType !== false ){
				ds_prn('<span style="color:#800;">' + key + '</span> : <span style="color:#050;">'+DWType.display+'</span> { ' + ( 'show' in DWType ? DWType.show( _value ) : '' ) + ' }' );
				continue;
			}
			
			if (typeof(_value) == 'object' && !justTop)
			{
				if(empty(_value)){
					ds_prn('<span style="color:#800;">' + key + '</span> : <span style="color:#050;">'+(_value === null ? 'null' : typeof(_value))+'</span> { }' );
				}else{
					ds_prn('<span style="color:#800;">' + key + '</span> : <span style="color:#050;">object</span> { ');
					ds_count++;
					print(_value);
					ds_count--;
					ds_prn("}");
				}
				continue;
			}
			if (_error) {
				ds_prn('<b><span style="color:#f00;">' + key + '</span> : <span style="color:#f00;">ERROR</span> = <span style="color:#f00;">' + _value + '</span></b>');
			} else {
				ds_prn('<span style="color:#666;">' + key + '</span> : <span style="color:#0A0;">' + typeof(_value) + '</span> = <span style="color:#00A;">' + ((typeof(_value) != 'object' && typeof(_value) != 'function') ? _value : (_value === null ? 'null' : typeof(_value))) + '</span>');
			}
		}
	}
	
	/*
	for( var di in definedInstances){
		if( obj instanceof definedInstances[di].type ){
			out += ('<span style="color:#800;">' + di + '</span> : <span style="color:#050;">'+di+"</span> { \n");
			ds_count++;
			if('show' in definedInstances[di]) ds_prn(definedInstances[di].show( obj ));
			out += ( '}' );
			trace(out);
			return;
		}
	}*/
	
	print(obj);
	trace(out);
}